name: Terraform Plan and Cost Analysis

on:
  workflow_dispatch:
    inputs:
      working_directory:
        required: true
        type: string
        description: "The directory containing Terraform configuration files"

env:
  WORKING_DIRECTORY: ${{ inputs.working_directory }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

jobs:
  terraform:
    name: terraform plan
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read

    defaults:
      run:
        shell: bash

    steps:
      - run: sleep 5

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1
          role-duration-seconds: 900
          role-session-name: GitHubActionsTerraformCICD

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform fmt -recursive -check=true

      - name: Terraform Initialize
        id: init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform plan -no-color

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIRECTORY }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform plan -out tfplan.binary

      - name: Terraform show
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform show -json tfplan.binary > plan.json

      - name: Setup Infracost
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json

      - name: Post Infracost comment
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          behavior: update
